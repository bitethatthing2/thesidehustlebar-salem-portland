'use client';

import React from 'react';
import { cn } from '@/lib/utils';
import { 
  TrendingUp, 
  TrendingDown, 
  Minus,
  Loader2
} from 'lucide-react';
import type { 
  StatCardProps, 
  ActionButtonProps, 
  ResponsiveContainerProps 
} from '@/types/dj-dashboard-types';

// ========================================================================
// RESPONSIVE CONTAINER
// ========================================================================

export function ResponsiveContainer({ 
  children, 
  className, 
  maxWidth = '4xl' 
}: ResponsiveContainerProps) {
  const maxWidthClasses = {
    'sm': 'max-w-sm',
    'md': 'max-w-md',
    'lg': 'max-w-lg',
    'xl': 'max-w-xl',
    '2xl': 'max-w-2xl',
    '4xl': 'max-w-4xl',
    'full': 'max-w-full'
  };

  return (
    <div className={cn(
      'w-full mx-auto px-4 sm:px-6 lg:px-8',
      maxWidthClasses[maxWidth],
      className
    )}>
      {children}
    </div>
  );
}

// ========================================================================
// STAT CARD COMPONENT
// ========================================================================

export function StatCard({ 
  value, 
  label, 
  subLabel, 
  icon, 
  trend,
  className 
}: StatCardProps) {
  const getTrendIcon = () => {
    if (!trend) return null;
    
    const icons = {
      up: <TrendingUp className="w-4 h-4 text-green-400" />,
      down: <TrendingDown className="w-4 h-4 text-red-400" />,
      neutral: <Minus className="w-4 h-4 text-gray-400" />
    };
    
    return icons[trend];
  };

  return (
    <div className={cn(
      'relative overflow-hidden rounded-lg p-4',
      'bg-white/10 backdrop-blur-sm',
      'border border-white/20',
      'transition-all duration-200',
      'hover:bg-white/15 hover:border-white/30',
      'min-h-[80px] sm:min-h-[100px]',
      className
    )}>
      {/* Background Icon */}
      {icon && (
        <div className="absolute top-2 right-2 opacity-20">
          {React.cloneElement(icon as React.ReactElement, { 
            className: 'w-8 h-8 sm:w-10 sm:h-10' 
          })}
        </div>
      )}
      
      {/* Content */}
      <div className="relative z-10">
        <div className="flex items-baseline gap-2">
          <div className="text-2xl sm:text-3xl font-bold text-white">
            {value}
          </div>
          {getTrendIcon()}
        </div>
        
        <div className="text-xs sm:text-sm text-white/80 mt-1">
          {label}
        </div>
        
        {subLabel && (
          <div className="text-xs text-white/60 mt-1">
            {subLabel}
          </div>
        )}
      </div>
    </div>
  );
}

// ========================================================================
// ACTION BUTTON COMPONENT
// ========================================================================

export function ActionButton({ 
  icon, 
  title, 
  subtitle, 
  onClick, 
  disabled = false,
  variant = 'primary',
  className 
}: ActionButtonProps) {
  const variants = {
    primary: 'from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600',
    secondary: 'from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600',
    danger: 'from-red-500 to-orange-500 hover:from-red-600 hover:to-orange-600'
  };

  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={cn(
        'relative overflow-hidden rounded-lg',
        'bg-gradient-to-r',
        variants[variant],
        'p-4 sm:p-6',
        'min-h-[80px] sm:min-h-[100px]',
        'w-full',
        'transition-all duration-200',
        'transform active:scale-95',
        'disabled:opacity-50 disabled:cursor-not-allowed',
        'focus:outline-none focus:ring-2 focus:ring-white/50',
        'group',
        className
      )}
    >
      {/* Hover Effect */}
      <div className="absolute inset-0 bg-white/0 group-hover:bg-white/10 transition-colors duration-200" />
      
      {/* Content */}
      <div className="relative z-10 flex flex-col items-center justify-center text-white">
        <div className="mb-2">
          {React.cloneElement(icon as React.ReactElement, { 
            className: 'w-6 h-6 sm:w-8 sm:h-8' 
          })}
        </div>
        <div className="font-semibold text-sm sm:text-base">
          {title}
        </div>
        {subtitle && (
          <div className="text-xs sm:text-sm opacity-80 mt-1">
            {subtitle}
          </div>
        )}
      </div>
    </button>
  );
}

// ========================================================================
// MOBILE TAB NAVIGATION
// ========================================================================

interface MobileTabsProps {
  tabs: Array<{
    id: string;
    label: string;
    icon?: React.ReactNode;
    count?: number;
  }>;
  activeTab: string;
  onTabChange: (tabId: string) => void;
  className?: string;
}

export function MobileTabs({ tabs, activeTab, onTabChange, className }: MobileTabsProps) {
  return (
    <div className={cn(
      'flex overflow-x-auto scrollbar-hide',
      'bg-slate-800/50 backdrop-blur-sm rounded-lg p-1',
      'gap-1',
      className
    )}>
      {tabs.map((tab) => (
        <button
          key={tab.id}
          onClick={() => onTabChange(tab.id)}
          className={cn(
            'flex items-center gap-2 px-4 py-2 rounded-md',
            'text-sm font-medium whitespace-nowrap',
            'transition-all duration-200',
            'min-w-max',
            activeTab === tab.id
              ? 'bg-purple-600 text-white'
              : 'text-gray-400 hover:text-white hover:bg-white/10'
          )}
        >
          {tab.icon}
          <span>{tab.label}</span>
          {tab.count !== undefined && (
            <span className={cn(
              'ml-1 px-2 py-0.5 text-xs rounded-full',
              activeTab === tab.id
                ? 'bg-white/20 text-white'
                : 'bg-gray-700 text-gray-300'
            )}>
              {tab.count}
            </span>
          )}
        </button>
      ))}
    </div>
  );
}

// ========================================================================
// LOADING SKELETON
// ========================================================================

interface SkeletonProps {
  className?: string;
  variant?: 'text' | 'card' | 'button';
}

export function Skeleton({ className, variant = 'text' }: SkeletonProps) {
  const variants = {
    text: 'h-4 w-full',
    card: 'h-24 w-full rounded-lg',
    button: 'h-12 w-full rounded-md'
  };

  return (
    <div className={cn(
      'animate-pulse bg-slate-700/50',
      variants[variant],
      className
    )} />
  );
}

// ========================================================================
// EMPTY STATE
// ========================================================================

interface EmptyStateProps {
  icon: React.ReactNode;
  title: string;
  description?: string;
  action?: {
    label: string;
    onClick: () => void;
  };
  className?: string;
}

export function EmptyState({ icon, title, description, action, className }: EmptyStateProps) {
  return (
    <div className={cn(
      'flex flex-col items-center justify-center',
      'py-12 px-6',
      'text-center',
      className
    )}>
      <div className="mb-4 opacity-50">
        {React.cloneElement(icon as React.ReactElement, { 
          className: 'w-12 h-12 text-gray-400' 
        })}
      </div>
      <h3 className="text-lg font-medium text-white mb-2">
        {title}
      </h3>
      {description && (
        <p className="text-sm text-gray-400 max-w-sm mb-4">
          {description}
        </p>
      )}
      {action && (
        <button
          onClick={action.onClick}
          className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md text-sm font-medium transition-colors"
        >
          {action.label}
        </button>
      )}
    </div>
  );
}

// ========================================================================
// LOADING SPINNER
// ========================================================================

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

export function LoadingSpinner({ size = 'md', className }: LoadingSpinnerProps) {
  const sizes = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8',
    lg: 'w-12 h-12'
  };

  return (
    <div className={cn('flex items-center justify-center', className)}>
      <Loader2 className={cn('animate-spin text-purple-500', sizes[size])} />
    </div>
  );
}

// ========================================================================
// RESPONSIVE GRID
// ========================================================================

interface ResponsiveGridProps {
  children: React.ReactNode;
  cols?: {
    default: number;
    sm?: number;
    md?: number;
    lg?: number;
    xl?: number;
  };
  gap?: number;
  className?: string;
}

export function ResponsiveGrid({ 
  children, 
  cols = { default: 1, sm: 2, lg: 4 },
  gap = 4,
  className 
}: ResponsiveGridProps) {
  const gridCols = cn(
    `grid gap-${gap}`,
    `grid-cols-${cols.default}`,
    cols.sm && `sm:grid-cols-${cols.sm}`,
    cols.md && `md:grid-cols-${cols.md}`,
    cols.lg && `lg:grid-cols-${cols.lg}`,
    cols.xl && `xl:grid-cols-${cols.xl}`
  );

  return (
    <div className={cn(gridCols, className)}>
      {children}
    </div>
  );
}

// ========================================================================
// BOTTOM SHEET (for mobile)
// ========================================================================

interface BottomSheetProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  children: React.ReactNode;
}

export function BottomSheet({ isOpen, onClose, title, children }: BottomSheetProps) {
  if (!isOpen) return null;

  return (
    <>
      {/* Backdrop */}
      <div 
        className="fixed inset-0 bg-black/50 z-40 lg:hidden"
        onClick={onClose}
      />
      
      {/* Sheet */}
      <div className={cn(
        'fixed bottom-0 left-0 right-0 z-50',
        'bg-slate-800 rounded-t-2xl',
        'transform transition-transform duration-300',
        'lg:hidden',
        isOpen ? 'translate-y-0' : 'translate-y-full'
      )}>
        {/* Handle */}
        <div className="flex justify-center pt-2">
          <div className="w-12 h-1 bg-gray-600 rounded-full" />
        </div>
        
        {/* Header */}
        {title && (
          <div className="px-6 py-4 border-b border-gray-700">
            <h3 className="text-lg font-semibold text-white">{title}</h3>
          </div>
        )}
        
        {/* Content */}
        <div className="px-6 py-4 max-h-[70vh] overflow-y-auto">
          {children}
        </div>
      </div>
    </>
  );
}